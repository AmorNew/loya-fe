import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';
import { type UnitId } from './collectionsReducer';

export interface DataState {
    currentObjectId?: UnitId,
    currentObjectsIds?: UnitId[],
}

const initialState: DataState = {
    currentObjectId: undefined,
    currentObjectsIds: undefined,
};

export const counterSlice = createSlice({
  name: 'data',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // Use the PayloadAction type to declare the contents of `action.payload`
    setCurrentObjectId: (state, action: PayloadAction<UnitId | undefined>) => {
      state.currentObjectId = action.payload;
    },
    setCurrentObjectsIds: (state, action: PayloadAction<UnitId[] | undefined>) => {
      state.currentObjectsIds = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
//   extraReducers: (builder) => {
//     builder
//       .addCase(incrementAsync.pending, (state) => {
//         state.status = 'loading';
//       })
//       .addCase(incrementAsync.fulfilled, (state, action) => {
//         state.status = 'idle';
//         state.value += action.payload;
//       })
//       .addCase(incrementAsync.rejected, (state) => {
//         state.status = 'failed';
//       });
//   },
});

export const { setCurrentObjectId, setCurrentObjectsIds } = counterSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCurrentObjectId = (state: RootState) => state.data.currentObjectId;
export const selectCurrentObjectsIds = (state: RootState) => state.data.currentObjectsIds;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
//   (amount: number): AppThunk =>
//   (dispatch, getState) => {
//     const currentValue = selectCount(getState());
//     if (currentValue % 2 === 1) {
//       dispatch(incrementByAmount(amount));
//     }
//   };

export default counterSlice.reducer;
