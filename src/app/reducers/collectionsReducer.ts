import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { LatLngExpression } from 'leaflet';
import { RootState, AppThunk } from '../../app/store';

export type UnitId = number;

interface Unit {
    position: LatLngExpression;

    model: string,
    mark: string, 
    lastActive: string,

    metrics: any,

    "created_at": string,
    "device": {
        "hw_id": string,
        "id": UnitId,
        "model": string,
        "protocol": string,
        "sim1": string,
        "sim2": string,
        "vendor": string
    },
    "icon": string,
    "id": UnitId,
    "updated_at": string,
    "vehicle": {
        "id": UnitId,
        "license_plate": string,
        "make": string,
        "model": string,
        "type": number,
        "vin": string
    },
    "visible_name": string
};

export interface CollectionsState {
    units: {[id: UnitId]: Unit};
}

const initialState: CollectionsState = {
    units: {},
};

export const counterSlice = createSlice({
  name: 'collections',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // Use the PayloadAction type to declare the contents of `action.payload`
    setUnits: (state, action: PayloadAction<Unit[] | undefined>) => {
      action.payload?.forEach(unit => {
        state.units[unit.id] = unit;
      });
    },
    updateUnitPosition: (state, action: PayloadAction<{position: LatLngExpression, objectId: UnitId}>) => {
      state.units[action.payload.objectId].position = action.payload.position;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
//   extraReducers: (builder) => {
//     builder
//       .addCase(incrementAsync.pending, (state) => {
//         state.status = 'loading';
//       })
//       .addCase(incrementAsync.fulfilled, (state, action) => {
//         state.status = 'idle';
//         state.value += action.payload;
//       })
//       .addCase(incrementAsync.rejected, (state) => {
//         state.status = 'failed';
//       });
//   },
});

export const { setUnits, updateUnitPosition } = counterSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectObjectById = (state: RootState, objectId?: UnitId): Unit | undefined => objectId ? state.collections.units[objectId] : undefined;
export const selectCurrentObjectsByIds = (state: RootState, objectIds: UnitId[]) => objectIds.map(objectId => state.collections.units[objectId]);

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
//   (amount: number): AppThunk =>
//   (dispatch, getState) => {
//     const currentValue = selectCount(getState());
//     if (currentValue % 2 === 1) {
//       dispatch(incrementByAmount(amount));
//     }
//   };

export default counterSlice.reducer;
